@inject ISnackbar Snackbar

<MudExpansionPanel HideIcon @bind-Expanded="@Expanded" >
    <TitleContent>@(TitleContent)</TitleContent>
    <ChildContent>
        @(ChildContent)
        @loadedContent
    </ChildContent>
</MudExpansionPanel>

<MudSnackbarElement Snackbar="@Snackbar"  />

@code {

    [Parameter, EditorRequired]
    public required RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    public RenderFragment TitleContent { get; set; }

    [Parameter]
    public bool Expanded { get; set; }

    [Parameter]
    public EventCallback<bool> ExpandedChanged { get; set; }

    [Parameter]
    public bool InitiallyExpanded { get; set; }

    private bool _beenExpanded;

    private string loadedContent = string.Empty;    

    private async Task LoadContent()
    {
        loadedContent = "Loading...";
        StateHasChanged();
        await Task.Delay(1000);
        loadedContent = "Content Loaded";
        _beenExpanded = true;
        StateHasChanged();
    }
    /// <inheritdoc />
    protected async override Task OnInitializedAsync()
    {
        // init expanded-state
        Expanded = InitiallyExpanded;
        if (!_beenExpanded && Expanded)
        {
            await LoadContent();
        }
        // base handling
        base.OnInitialized();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_beenExpanded && Expanded)
        {
            await LoadContent();
        }
    }
}
