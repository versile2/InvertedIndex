@page "/docupload"
@inject IDocumentRepository DocRepo
@inject ISnackbar Snackbar
@inject IIndexService IdxService

<MudText Typo="Typo.h3">Document Manager</MudText>
<br/>
<MudText Typo="Typo.body1">
    This application will only keep ten active files stored at any given time.<br/>
    Documents may not exceed 3MB and should be in text, json, or csv format.
</MudText>
<br/>
<MudStack Row="true" Spacing="3">
    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile" Accept="@string.Join(",", AllowedExtensions)">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">Upload Text File</MudButton>
        </ActivatorContent>
    </MudFileUpload>
    <MudButton Variant="Variant.Filled" OnClick="@(async () => await RefreshIndex())" Color="Color.Info" StartIcon="@Icons.Material.Filled.Refresh">Refresh Index</MudButton>
</MudStack>
<br />
<MudDataGrid T="Document" Items="_files" Style="width: 75%;" ShowColumnOptions="false">
    <Columns>
        <PropertyColumn Property="x => x.DocumentId" Title="Doc ID" HeaderStyle="width: 120px;" CellStyle="text-align: center;" />
        <PropertyColumn Property="x => x.FileName" Title="File Name" HeaderStyle="width: auto;" />
        <TemplateColumn HeaderStyle="width: 230px;" Title="">
            <CellTemplate>
                <MudButton EndIcon="@startIcon(context.Item.FileName)" Variant="Variant.Filled" OnClick="@(async () => await ShowFileText(context.Item.DocumentId))">Show Text</MudButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(async () => await DeleteFile(context.Item.DocumentId))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
<br/>
@if (textOfFile.Length > 0)
{
    <MudPaper Elevation="3" Class="d-flex flex-column overflow-x-auto" Width="80%" MaxHeight="95vh">
        <MudText Typo="Typo.h4"><center>@fileName</center></MudText>
        <MudText Typo="Typo.body2">
            <pre style="white-space: pre-wrap; word-wrap: break-word;">
                @textOfFile
            </pre>
        </MudText>
    </MudPaper>
}

@code {
    List<Document> _files = default!;
    string textOfFile = string.Empty;
    string fileName = string.Empty;
    const long MaxFileSize = 3 * 1024 * 1024; // 3MB in bytes
    readonly string[] AllowedExtensions = { ".txt", ".csv", ".json" };
    string startIcon(string file1) => !file1.Equals(fileName) ? Icons.Material.Outlined.ArrowDropDown : Icons.Material.Outlined.ArrowDropUp;

    protected override async Task OnInitializedAsync()
    {
        await GetFiles();
    }

    private async ValueTask GetFiles()
    {
        _files = await DocRepo.GetAllDocumentsAsync();
    }

    private async ValueTask ShowFileText(int docId)
    {
        var opResult = await DocRepo.GetDocumentWithContentById(docId);
        string newText = string.Empty;
        if (opResult.Success && opResult.Data?.Data != null)
        {
            newText = System.Text.Encoding.UTF8.GetString(opResult.Data.Data);            
        }
        else
        {
            ShowNotification("Unable to load file content.", Severity.Warning);
        }
        if (textOfFile.Equals(newText))
        {
            textOfFile = string.Empty;
            fileName = string.Empty;
        }
        else
        {
            fileName = opResult.Data!.FileName;
            textOfFile = newText;
        }
    }

    private async Task RefreshIndex()
    {
        await IdxService.BuildInitialIndexAsync(new CancellationToken());
        ShowNotification("Index Rebuilt", Severity.Success);
    }

    private async Task DeleteFile(int docID)
    {
        var docFile = _files.FirstOrDefault(x => x.DocumentId == docID);
        if (docFile != null)
        {
            await DocRepo.DeleteAsync(docFile.DocumentId);
            _files.Remove(docFile);
            await IdxService.DeleteDocumentAsync(docFile.DocumentId);
            await GetFiles();
        }
        else
            ShowNotification("Failed to locate file", Severity.Warning);
    }

    private async Task UploadFile(IBrowserFile file)
    {
        if (file == null)
            return;

        if (file.Size > MaxFileSize)
        {
            ShowNotification("File size exceeds the 3MB limit.", Severity.Warning);
            return;
        }

        var fileExtension = Path.GetExtension(file.Name).ToLowerInvariant();
        if (!AllowedExtensions.Contains(fileExtension))
        {
            ShowNotification("Only text files (.txt, .csv, .json) are allowed.", Severity.Warning);
            return;
        }

        try
        {
            // ensure no duplicate filenames
            var dupFile = _files.FirstOrDefault(x => x.FileName == file.Name);
            if (dupFile != null)
            {
                ShowNotification($"Upload failed: {file.Name} is a duplicate.", Severity.Warning);
                return;
            }
            // ensure not more than 10 files
            while (_files.Count >=10)
            {
                var docFile = _files[0];
                await DocRepo.DeleteAsync(docFile.DocumentId);
                await IdxService.DeleteDocumentAsync(docFile.DocumentId);
                _files.Remove(docFile);
            }
            using var ms = new MemoryStream();
            await file.OpenReadStream(MaxFileSize).CopyToAsync(ms);
            var fileContent = ms.ToArray();

            var document = new Document
                {
                    FileName = file.Name,
                    Data = fileContent
                };

            var opResult = await DocRepo.InsertAsync(document);
            if (opResult.Success)
            {
                await IdxService.IndexDocumentAsync(document);
                ShowNotification("File uploaded successfully.", Severity.Success);
            }
            else
            {
                ShowNotification($"Upload failed: {opResult.Message}", Severity.Warning);
            }
            await GetFiles();
        }
        catch (Exception ex)
        {
            ShowNotification($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private void ShowNotification(string message, Severity severity)
    {
        Snackbar.Add(message, severity);
    }
}
